---
title: "02_json_arquero_ojs_explore"
format: html
editor: visual
---

```{ojs}
url_drm = 'https://api.weather.gov/gridpoints/RAH/64,68/forecast/hourly?units=us'
url_othr = 'https://api.weather.gov/gridpoints/GRB/68,20/forecast/hourly?units=us'

// my_js_df = aq.fromJSON(await fetch('https://api.weather.gov/gridpoints/RAH/64,68/forecast/hourly?units=us').then(res => res.json()), { autoType: false })
my_js_df = aq.fromJSON(await fetch(url_drm).then(res => res.json()), { autoType: false })

my_js_df.view()



// properties = my_js_df.properties
// properties.view()
```

### Using the d3.json method

Heat Index https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml

HI = -42.379 + 2.04901523 \* T + 10.14333127 \* RH - .22475541 \* T \* RH - .00683783 \* T \* T - .05481717 \* RH \* RH + .00122874 \* T \* T \* RH + .00085282 \* T \* RH \* RH - .00000199 \* T \* T \* RH \* RH

```{ojs}

foo = await d3.json(url_drm) // 'https://api.weather.gov/gridpoints/RAH/64,68/forecast/hourly?units=us')

foo_periods = foo.properties.periods

// foo_periods[0]

aq.from(foo_periods).view()

temp_df = aq.from(foo_periods)

my_df = temp_df
  .derive({  startTime: d =>  op.parse_date(d.startTime) })
  
my_dew_df = my_df
  .derive({
    dewpoint_F: (d) => d.dewpoint.value
  })
  .derive({
    dewpoint_F: d => (d.dewpoint_F * (9 / 5) + 32)
  })
  .derive({
    humidity_rel: d => d.relativeHumidity.value
  })
  .derive({
    heat_index: d => -42.379 + 
    (2.04901523 * d.temperature) + 
    (10.14333127 * d.humidity_rel) -
    (.22475541 * d.temperature * d.humidity_rel) - 
    (.00683783 * d.temperature * d.temperature) - 
    (.05481717 * d.humidity_rel * d.humidity_rel) + 
    (.00122874 * d.temperature * d.temperature * d.humidity_rel) + 
    (.00085282 * d.temperature * d.humidity_rel * d.humidity_rel) - 
    (.00000199 * d.temperature * d.temperature * d.humidity_rel * d.humidity_rel)
  })
  .derive({
    heat_index: d => op.round(d.heat_index, 0)
  })
  .derive({
    rain_probability: d => d.probabilityOfPrecipitation.value
  })
  .derive({
    day_n: d => op.dayofweek(d.startTime)
  })
  .derive({
    day_string: row => {
      if (row.day_n == 0) return "Sun";
      if (row.day_n == 1) return "Mon";  
      if (row.day_n == 2) return "Tues";
      if (row.day_n == 3) return "Wed";
      if (row.day_n == 4) return "Thurs";  
      if (row.day_n == 5) return "Fri";
      if (row.day_n == 6) return "Sat"
   }
  })
  .derive({
    month: d => op.month(d.startTime) + 1
  })
  .derive({
    date_month: d => d.date(d.startTime)
  })
  .derive({
    date_month: d => d.date(d.startTime)
  })
  .derive({
    date_string: d => d.day_string + ", " + d.month + "/" + d.date_month
  })


// HI = -42.379 + 2.04901523 * T + 10.14333127 * RH - .22475541 * T * RH - .00683783 * T * T - .05481717 * RH * RH + .00122874 * T * T * RH + .00085282 * T * RH * RH - .00000199 * T * T * RH * RH
  
await my_dew_df.view()
```

### viz

```{ojs}
//| warning: false
//| message: false

Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "temperature",
      stroke: "orange"
    }),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "dewpoint_F", 
      stroke: "green",
    }),
    Plot.text(my_dew_df,  Plot.selectMaxX({
      x: "startTime",
      y: "dewpoint_F",
      text: ["Humidity"],
      lineAnchor: "bottom",
      fill: ["green"],
      //dy: 100,
      //dx: 100,
      fontSize: 24
    })),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "heat_index", 
      stroke: "red"
    }),
  ]
})

Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "temperature",
      stroke: "orange"
    }),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "dewpoint_F", 
      stroke: "green"
    }),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "heat_index", 
      stroke: "red"
    }),
    Plot.barY(my_dew_df, {
      x: 'startTime',
      y: 'rain_probability',
      fill: "lightblue"
    })
  ]
})

Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.barY(my_dew_df, {
      x: 'startTime',
      y: 'rain_probability',
      fill: "lightblue"
    }),
  ]
})
```

## goo

```{ojs}

Plot.plot({
  marks: [
    Plot.barY(alphabet, {
      x: "letter",
      y: "frequency"
    }),
    Plot.barY(alphabet, {
      filter: (d) => /[aeiouy]/i.test(d.letter),
      x: "letter",
      y: "frequency",
      stroke: "red",
      strokeWidth: 3,
      inset: -3 // expand the bars
    })
  ]
})

my_letters = alphabet
aq.from(my_letters).view()


Plot.plot({
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(my_dew_df, {
      x: "startTime",
      y: "dewpoint_F", 
      stroke: "green",
    }),
    Plot.text(my_dew_df,  Plot.selectFirst({
      x: "startTime",
      y: "dewpoint_F",
      text: ["Humidity"],
      lineAnchor: "bottom",
      fill: ["green"],
      //dy: 100,
      //dx: 156,
      fontSize: 24
    })),
    Plot.text(my_dew_df,  Plot.selectMaxX({
      x: "startTime",
      y: "dewpoint_F",
      text: ["Humidity"],
      lineAnchor: "top",
      stroke: "Red",
      frameAnchor: "bottom",
//      dy: 10,
//      dx: 156,
      fontSize: 24
    }))
  ]
})

my_dew_df.numRows()

my_weather_long_df
  .view()
  

my_weather_long_df = my_dew_df
  .select("number", "startTime", "temperature", "dewpoint_F", "heat_index", "rain_probability", "day_n", "day_string", "month", "date_string")
  .fold(['temperature', 'dewpoint_F', 'heat_index'], // 'rain_probability', 
    {as: ['measurement', 'value']})


Plot.plot({
  color: {legend: true, range: ["forestgreen", "firebrick", "darkorange"]}, 
  //x: {domain: [op.parse_date('2023-07-27T13:00:00.000'), op.parse_date('2023-08-05')]},
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(my_weather_long_df, {
      x: "startTime",
      y: "value", 
      z: "measurement",
      stroke: "measurement",
      label: "measurement",
    }),
    Plot.text(my_weather_long_df, 
      Plot.selectMinY({
        x: "startTime",
        y: "value",
        z: "measurement",
        text: "measurement",
        textAnchor: "start",
        fill: "measurement",
        stroke: "black",
        //fillOpacity: 0.8,
        //stokeOpacity: 0.8,
        dy: 5,
        dx: -5,
        fontSize: 18
      })),
  ]
})
```

## distinct

```{ojs}
my_dates = my_weather_long_df
 .orderby('startTime')
 .rollup({my_distinct: op.array_agg_distinct('date_string')})
  
my_weather_long_df
 .orderby('startTime')
 .rollup({my_distinct: op.array_agg_distinct('date_string')})
 .view()
 
my_weather_long_df
// .orderby('startTime')
 .rollup({my_distinct: op.array_agg_distinct('date_string')})
 .view()


my_dates

// viewof date_one_1 = Inputs.select(my_dates)

// viewof date_one = Inputs.select(aq.escape(d => d.my_dates))
```

```{ojs}
my_weather_long_df
  .derive({ unq: op.distinct('date_string')})
  .view()
```

```{ojs}
stateShapes.features.map(d => d.properties.name).sort()

aq.from(stateShapes.features).view()

```

## Import arquero libraries

```{ojs}
import { aq, op } from '@uwdata/arquero'
import { stateShapes } from '@danielkerrigan/synchronized-map-input'
// import { fromGeoJSON } from '@aris-data/arquero'
// import { fromJSON } from "arquero";
```
